


///////////////////////////

Design by contract

When is this useful? When is it less useful?



///////////////////////////

Binary search bug.


    int mid = (low+high)/2;


--> what's the problem? how to fix?
    integer overflow

    int mid = low + (high-low)/2


--> how long was it there? original C++ (in 80s)
    in Java until 2002



///////////////////

Timsort bug (Java's Collections sort / Arrays.sort / Python's sort)
    - developed in 2002
    - breaks array into series of runs that are separately sorted and merged


--> bug discovered when researchers tried to use formal verification
    to prove correctness in 2015...and were unsuccessful

--> would crash in certain cases when the run lengths become smaller
    than expected


http://envisage-project.eu/proving-android-java-and-python-sorting-algorithm-is-broken-and-how-to-fix-it/



///////////////////////////

Complete formal verification is not practical in many cases

Halfway option

- Write a formal specification (avoids ambiguity) that
    *could* be used with a verification tool
- Enforce preconditions
- Check postconditions
- (Check invariants)


//////////////////////////

Java Modeling Language (JML)

(background)

See jmlSyntax.txt for a primer


Whose job is it to check preconditions?

    --> ...can we enforce in practice?
    --> what to do if preconditions not met?

    throw an exception in the function if the precondition is not met

What should a function do if its preconditions are not met?
    - return a dummy value?



How to enforce postconditions?

    assert our postcondition before returning



--> why might this would be preferable to only using test cases?



/////////////////////////////

IntelliJML - does some JML syntax checking

https://gitlab.utwente.nl/fmt/intellijml/-/releases

Download the IntelliJ-1.1.6.jar file

In IntelliJ, File->Settings->Plugins, click the gear, select
    "Load Plugin from Disk", find the jar file



////////////////////////////////////

JMLExample.java


- add our function contract checks



- do full contract + checks on mult example


///////////////////////////////////////

Example: Write a method that returns an array whose
    elements correspond to the sizes of each
    string in a parameter array

--> specification?


///////////////////////////////////////

Example: write specification for indexOf method:

/*@
    requires arr != null;
    ensures (\result == -1 <==> \forall(int k; k >= 0 && k < arr.length; arr[k] != num));
    ensures (\result >= 0 && \result < arr.length <==>
                (\exists(int k; k >= 0 && k < arr.length; arr[k] == num && \result == k));
    ensures (\result >= 0 && \result < arr.length <==>
                (\forall(int k; k >= 0 && k < \result; arr[k] != num );
*/
public static int indexOf(int[] arr, int num) {
    for (int i = 0; i < arr.length; i++) {
        if (arr[i] == num) return i;
    }

    return -1;
}



--> any ambiguity?



////////////////////////////

Review: global invariants.

If a class has global invariants
- those invariants should hold when an object is created
- it is an unlisted precondition of each method that the global
    invariants hold
- it is an unlisted postcondition of each method that the global
    invariants STILL hold




in a class with global invariants, write a globalsAssert method
    - where should we call it?

    at the beginning of a method
    at the end of a method


///////////////////////////////////////

Global invariants in JML:

//@public invariant (say something about public members);

////////////////////////////

Enforcing global invariants AND function specifications:

public returnType method(params) {
    //assert that the global invariants hold here
    //if the preconditions don't hold, throw an exception

    code for the method

    //assert that the global invariants still hold
    //assert that the postconditions hold
}

--> add checks to withdraw and deposit


//////////////////////////////////////

See Account example (similar to what we did with Logika)

//////////////////////////////////////

//////////////////////////////////////

Best practices outside class


    E.g., what if we had a Clock class?

    minutes
    hours
    seconds
    AM/PM

    minutes/seconds - 0-59
    hours: 1-12



    tick() - go to next second



Highly recommend:
- write global invariants
    - considerations for method parameters?
        require parameters be so that they don't violate global
        invariants

    - considerations for method code?
        guides the code so global invariants aren't violated



- write preconditions and postconditions for all methods
    - throw exceptions if your preconditions aren't met



Next level:
- add asserts that global invariants still true at method end

- add asserts for postconditions


--> be careful with documentation


//////////////////////////////////////

Content of CIS 575.


To prove correctness of a function:

   - function contract (preconditions and postconditions)
   - loop invariant for any loops
        - describe progress loop has made so far
        - bound the loop counter
        - describe measure of work (for termination)


The process of proving correctness of a non-Logika algorithm
or function is EXACTLY the same approach we used in Logika.


--> What approach is that?

    prove loop invariants hold before loop begins

    prove loop invariants still hold at the end of each iteration

    use the invariants and !(loop condition) to
        prove the postconditions


/////////////////////////////////////

Termination - whether a program will finish on all inputs


Partial Correctness:
    if the precondition is satisfied
    we guarantee the postcondition if the program terminates


Total Correctness:
    if the precondition is satisfied
    we guarantee the postcondition AND termination


We need to show termination to achieve total correctness


////////////////////////////////////////

Termination with a loop.
    - create measure of how much work is left
        (i.e., how many iterations are left)

    - show that the measure DECREASES with each iteration
    - show that if there is no more work to do, then the loop
        has finished

    - see example


Termination with recursion.
    - use induction
    ...what does this mean about our preconditions?
    - see example



Collatz function.



////////////////////////////////////////

Decidability - whether a problem can be decided one way or another

Halting problem - given a computer program and a set of inputs
    can you write another program to determine if the original
    program will halt for the inputs?


Suppose, for the sake of contradiction, that I CAN write
a program that can determine if another program terminates.

Assume we have this function:

    def Halt(Function, Input):
        if (Function(Input) halts): return true
        else return false

We write:

    def DoOpposite(Function):
        if (Halt(Function, Function)) loop forever
        else exit

Consider DoOpposite(DoOpposite):
    Case 1: loops forever. Means Halt(DoOpposite, DoOpposite)
        return true. Thus DoOpposite(DoOpposite) halts.

    Case 2: exits.  Means Halt(DoOpposite, DoOpposite) returns
        false. Thus DoOpposite(DoOpposite) loops forever.

 Both cases led to a contradiction.
   So we can't write a Halt function.



//////////////////////////////////

//////////////////////////////////

OpenJML

- can verify total correctness if you:
    - provide function contracts
    - for loops, provide loop invariants and termination measure

--> see online tutorial/documentation


https://www.openjml.org/tutorial/



/////////////////////////////

Next time:
- review for final