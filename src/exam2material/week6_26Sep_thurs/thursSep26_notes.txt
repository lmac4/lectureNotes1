HW 5 due Tuesday, October 1

////////////////////////

Today:
- more with sets
- limitations of propositional logic
- intro to predicate logic

////////////////////////

Reminder: set-builder notation

{x : a condition involving x}


{x : x = 2k+5, k ∈ ℕ, k ≤ 3}

{7, 9, 11}

////////////////////////

Describe these sets in set builder notation


{5,10,15,20,25, ...}

{x : x = 5k, k ∈ ℕ}


{CIS 115, CIS 200, CIS 300, CIS 301}

{x : x is CIS course and x is in the CIS minor}


{2,4,8,16,32}

{x : x = 2^k, k ∈ ℕ, k ≤ 5}

///////////////////////////////////////
∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

///////////////////////////////////////

Set union, ⋃

The union of the sets A and B, written A ⋃ B, is the set
of all elements....that are in either A or B.


How could we express in set builder notation?

A ⋃ B = {x : x ∈ A ⋁ x ∈ B}


//////////////////////////////////////
⋃ ⋂ ⋁ ⋀ ∈ ∉
///////////////////////////////////////

Set intersection, ⋂

The intersection of the sets A and B, written A ⋂ B, is the set
of all elements that are...in both A and B


How could we express in set builder notation?

A ⋂ B = {x : x ∈ A ⋀ x ∈ B}

///////////////////////////////////////

Set difference, -


The difference between the sets A and B, written A - B, is the set
of all elements...all elements in A that not also in B

           Can also be written: / or \



How could we express in set builder notation?

A - B = {x : x ∈ A ⋀ x ∉ B}









//////////////////////////////////////
⋃ ⋂ ⋁ ⋀ ∈ ∉
///////////////////////////////////////

A = {1,3,7,10,11,12}
B = {2,3,4,5,6,7}

Find:

A ⋃ B = {1,3,7,10,11,12,2,4,5,6}
A ⋂ B = {3,7}
A - B = {1,10,11,12}
B - A = {2,4,5,6}


A - B = A - (A ⋂ B)

//////////////////

What do we know if A ⋂ B = A ⋃ B?

 A must equal B


What do we know if A - B = A?

    A ⋂ B = ∅ (the empty set)


What do we know if A - B = B - A?

 if A = B

/////////////////////////////////////


Subset - A is a subset of B, written A ⊆ B, if
    all elements in A are also in B.

(We say A ⊂ B if A is a subset of B but A ≠ B.)




Example:

A = {1,3,4}

B = {1,3,5,8}

--> is A a subset of B? no, because the 4 in A isn't in B



A = {8,1,3}

B = {1,3,5,8}

--> is A a subset of B? yes, all the elements in A are also in B



//////////////////////////////////

Quantifiers - helps describe all or some elements in a set

    ∀ - universal quantifier, read as "for all"

    ∃ - existential quantifier, read as "there exists"



Can we define whether set A is a subset of set B using quantifiers?

A ⊆ B means ∀ x ∈ A → x ∈ B




How could we define whether set A equals set B using quantifiers?

(∀ x ∈ A → x ∈ B) ⋀ (∀ x ∈ B → x ∈ A)


∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

//////////////////////////////////////

(we will come back to sets in a couple of weeks to
do proofs with them)

//////////////////////////////////////

A predicate is a boolean function that represents whether
    an individual has a particular property


Set builder notation: {x : P(x)}

where P(x) is a statement (a predicate) involving x




The set is all such x where P(x) is true

//////////////////////////////////////

Example:

A = {x : x ∈ ℕ ⋀ x^2 ≥ 25 }

    all natural numbers whose square is greater than or equal
        to 25


P(x) = x ∈ ℕ ⋀ x^2 ≥ 25

What are these saying? Are they true?

P(2) = 2 ∈ ℕ ⋀ 2^2 ≥ 25 is false, since 4 is not >= 25
P(-6) = -6 ∈ ℕ ⋀ (-6)^2 ≥ 25 is false since -6 isn't a natural number
P(10) = true

Is 2 in A? Is -6? Is 10?

10 is in A, the others aren't


//////////////////////////////////////

Limitations of propositional logic:

Premises:
    All humans are mortal.
    Socrates is human.

Conclusion
    Therefore, Socrates is mortal.



How would we prove this in propositional logic?

What propositional atoms?

p: all humans are mortal
q: Socrates is a human
r: Socrates is mortal


p, q ⊢ r



///////////////

Predicate logic:

Instead of propositions, we will make claims about
individuals in a domain (a set)


These claims will involve predicates and quantifiers



//////////////////

More with predicates.

Example:

    Domain: {x : x is a student at K-State}
    C(x): whether x is in CIS 301

    Bob is taking: CIS 300, ECE 241, MATH 221, ENGL 200
    Jill is taking: CIS 301, MATH 510, HIST 251, MUSIC 170


    What is the value of C(Bob)? false (Bob isn't in CIS 301)

    What is the value of C(Jill)? true (Jill is in CIS 301)

    What is the value of C(Bob) ⋀ C(Jill)? false


////////////////

Quantifiers and predicates

Domain: {strawberry, blueberry, banana, orange, grapefruit, apple}

Berry(x): x is a berry
Citrus(x): x is a citrus fruit
Peel(x): x has a peel (that needs to be removed before eating)
Seeds(x): x contains inedible seeds
Bite(x): x is bite-sized

Berry(strawberry) -  true
Citrus(strawberry) - false
Peel(strawberry) - false
Seeds(strawberry) - false
Bite(strawberry) - true



Write each statement in English. Is each one true or false?

∀ x (Berry(x))

For all fruits x, x is a berry

Try to write it like this: "All fruits are berries"

This is false in our domain -- a banana is not a berry

Berry(strawberry) ⋀ Berry(blueberry) ⋀ Berry(banana) ⋀
    ... ⋀ Berry(apple)


    --> how could we express the same statement in our domain
    WITHOUT a quantifier?




///

∃ x (Citrus(x) ⋀ Seeds(x))

There exists a fruit that is both citrus and has inedible seeds


Or: "There is a fruit that is both citrus and has inedible seeds"

    --> how could we express the same statement in our domain
    WITHOUT a quantifier?

true - an orange is citrus with inedible seeds


(Citrus(strawberry) ⋀ Seeds(strawberry)) ⋁ (Citrus(blueberry) ⋀ Seeds(blueberry))
    ⋁ ... ⋁ (Citrus(orange) ⋀ Seeds(orange))
///

∀ x (Berry(x) ⋀ Bite(x))

All fruits are berries and (all fruits) are bite-sized

false - an apple is not a berry (and is also not bite-sized)


///

∀ x (Berry(x) → Bite(x))

For all fruits that are berries, they are bite-sized

aim for this: "All berries are bite-sized"

(Berry(strawberry) → Bite(strawberry)) ^ (Berry(blueberry) → Bite(blueberry))
    ^ (Berry(orange) → Bite(orange))

true

///

¬(∀ x Peel(x))

Can you think of another way to write the same thing?

Not all fruits have to be peeled

true - strawberries don't have to be peeled


¬(Peel(strawberry) ^ Peel(blueberry) ^ ... ^ Peel(orange))

!Peel(straw) V !Peel(blue) V .... V !Peel(orange)


equivalent to:
∃ x ¬Peel(x)

///

¬(∀ x (Seeds(x) → Citrus(x)))

Not all fruits with inedible seeds are citrus

to be true, need one fruit with inedible seeds that isn't citrus

    true - an apple has inedible seeds but isn't citrus


Can you think of another way to write the same thing?

∃ x (Seeds(x) ^ ¬Citrus(x))

///

∀ x ¬Peel(x)

All fruits don't need to be peeled

false - bananas DO need to be peeled

¬(∃ x Peel(x))

///

¬(∃ x Berry(x))

¬∃ x - read as "there does not exist"


there does not exist a berry

false - strawberry is a berry

///

¬(∃ x (Peel(x) ⋀ Citrus(x)))


There does not exist a fruit that you need to peel and is citrus

false - orange needs to be peeled and is citrus

///

∃ x ¬(Peel(x) ⋀ Seeds(x))

There exists a fruit that doesn't both need to be peeled and have seeds

(or there exists a fruit that doesn't need to be peeled or doesn't have seeds)

NO: There exists a fruit that doesn't need to be peeled and
    doesn't have seeds



///

∃ x (Citrus(x) → Berry(x))


There exists a fruit and if that fruit is citrus, then it is a berry

(Citrus(strawberry) → Berry(strawberry)) V ... V (Citrus(orange) → Berry(orange))


this whole is true if we have any fruit that is NOT citrus


probably meant: ∃ x (Citrus(x) ^ Berry(x))
    (means: there is a fruit that is citrus and a berry)

/////////////////

For all: usually connect with... ->

There exists: usually connect with... ^ (AND)

/////////////////

stopped here - will continue on Tuesday

//////////////////

Quantifiers and sets of numbers.


∀ x ∈ ℝ (x^2 ≥ 0)       //what is this saying? why is it true?




∀ x ∈ ℝ (x^2 > 0)       //Is this true?




∃ x ∈ ℤ (x^2 == 1)       //what is this saying? why is it true?




∃ x ∈ ℤ ∀ y ∈ ℤ (x + y == 1)     //what is this saying? Is it true?




∀ x ∈ ℤ ∃ y ∈ ℤ (x + y == 1)

/////////////////////////////

Next time:
- more with predicate logic translations
- DeMorgan's laws for quantifiers
- Natural deduction rules with quantifiers

//////////////////////